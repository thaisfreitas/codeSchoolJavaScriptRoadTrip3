//Prototypes and Inheritance I
Array.prototype.countCattle = function(kind) {
	var numKind = 0;
	for (var i = 0; i < this.length; i++) {
		if (this.type == kind) {
			numKind += 1;
		}
	}
	return numKind;
};


//Prototypes and Inheritance II
alert(canyonCows.countCattle("calf") + valleyCows.countCattle("bull") +
	forestCows.countCattle("cow"));


//Prototypes and Inheritance III
Object.prototype.noCalvesYet = function() {
	if (this.type == "cow" && this.hadCalf == null) {
		return true;
	} else {
		return false;
	}
};

Array.prototype.countForBreeding = function() {
	var numToBreed = 0;
	for (var i = 0; i < this.length; i++) {
		if (this[i].noCalvesYet()) {
			numToBreed += 1;
		}
	}
	return numToBreed;
};

//Prototypes and Inheritance IV
Object.prototype.noCalvesYet = function() {
	if (this.type == "cow" && this.hadCalf == null) {
		return true;
	} else {
		return false;
	}
};

Array.prototype.countForBreeding = function() {
	var numToBreed = 0;
	for (var i = 0; i < this.length; i++) {
		if (this[i].noCalvesYet()) {
			numToBreed++;
		}
	}
	return numToBreed;
};

var numPriorityCows = canyonCows.countForBreeding() + valleyCows.countForBreeding() +
	forestCows.countForBreeding() + badlandsCows.countForBreeding();

alert("Herd-merger has indicated " + numPriorityCows +
	" cows of top breeding priority.");


//challenges 7

var genericPost = {
	x: 0,
	y: 0,
	postNum: undefined,
	connectionsTo: undefined,
	sendRopeTo: function(connectedPost) {
		if (this.connectionsTo == undefined) {
			var postArray = [];
			postArray.push(connectedPost);
			this.connectionsTo = postArray;
		} else {
			this.connectionsTo.push(connectedPost);
		}
	}
};
// create post1 and post2
var post1 = Object.create(genericPost);
var post2 = Object.create(genericPost);

// modify the post properties
post1.x = -2;
post1.y = 4;
post1.postNum = 1;

post2.x = 5;
post2.y = 1;
post2.postNum = 2;

// connect the posts together
post1.sendRopeTo(post1);
post1.sendRopeTo(post2);
post2.sendRopeTo(post2);
post2.sendRopeTo(post1);
